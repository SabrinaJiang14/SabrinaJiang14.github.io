<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sabrinajiang14.github.io/</id>
    <title>Sab.J 的碼農世界</title>
    <updated>2019-11-26T09:28:24.449Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sabrinajiang14.github.io/"/>
    <link rel="self" href="https://sabrinajiang14.github.io//atom.xml"/>
    <subtitle>喜歡看看新技術，了解新架構，正在往Clean Code的方向前進…</subtitle>
    <logo>https://sabrinajiang14.github.io//images/avatar.png</logo>
    <icon>https://sabrinajiang14.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Sab.J 的碼農世界</rights>
    <entry>
        <title type="html"><![CDATA[[Test] iOS 自動化測試之好用工具 — Appium]]></title>
        <id>https://sabrinajiang14.github.io//post/ios-zi-dong-hua-ce-shi-zhi-hao-yong-gong-ju-appium</id>
        <link href="https://sabrinajiang14.github.io//post/ios-zi-dong-hua-ce-shi-zhi-hao-yong-gong-ju-appium">
        </link>
        <updated>2019-11-25T06:23:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id=""></h2>
<p>第一次聽到 Appium 這個詞是在 2016 年的時候，當下覺得這東西真好玩，馬上就想試試。但是我光是第一步安裝就被難倒，只好默默把這個關鍵字收藏起來，等到某一天有閒暇時再來研究。</p>
<p>事隔三年多，最近比較有點空閒了。又忽然想到這東西。想說是該來研究一下了。不過在安裝過程還是遇到一些坑，還是順手把它記下，以備不時之需。</p>
<hr>
<h2 id="appium-安裝簡介">Appium 安裝簡介</h2>
<blockquote>
<p>注意：以下的每個步驟卻一不可唷！</p>
</blockquote>
<h3 id="step-1">Step 1</h3>
<p>打開 Terminal，輸入 <code>bash java -version</code> ，檢查是否有安裝 Java（如果沒有安裝過的，記得到 Oracle 找最新的 Java 版本安裝，點此到<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk13-downloads-5672538.html">官網</a>）<br>
<img src="https://sabrinajiang14.github.io//post-images/1574749934230.png" alt=""></p>
<p align=center><font size=1>(圖片取自 Oracle 官網)</font></p>
<p>如果有安裝了，應該會顯示這些訊息<br>
<img src="https://sabrinajiang14.github.io//post-images/1574750032945.png" alt=""></p>
<h3 id="step-2">Step 2</h3>
<p>輸入 <code>bash git --version</code> 檢查是否有安裝 Git（如果沒有安裝過，也可以參考<a href="https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8">這篇文章</a>安裝 Git）<br>
<img src="https://sabrinajiang14.github.io//post-images/1574750125425.png" alt=""></p>
<h3 id="step-3">Step 3</h3>
<p>輸入 <code>bash ruby -v</code> 檢查是否有安裝 ruby<br>
<img src="https://sabrinajiang14.github.io//post-images/1574750190041.png" alt=""></p>
<h3 id="step-4">Step 4</h3>
<p>安裝brew，請輸入 <code>bash ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
<h3 id="step-5">Step 5</h3>
<p>安裝 Xcode ，畢竟 Appium 還是在 Xcode 的基礎上做測試，所以還是要安裝。</p>
<h3 id="step-6">Step 6</h3>
<p>安裝 node，請輸入 <code>bash brew install node</code><br>
但是在這一步一直失敗，訊息提示寫入失敗或是找不到這個資料夾。查了很多資料之後，發現應該是權限有問題，所以我先做以下步驟：</p>
<blockquote>
<p>。 移除 node : brew uninstall node<br>
。 權限重新設定：sudo chown -R $(whoami) $(brew — prefix)/*<br>
。 重新安裝 node：brew install node<br>
。 再重下指令：brew link node<br>
。 如果還是失敗，就改成：brew link — overwrite node</p>
</blockquote>
<p>再打一次 <code>bash node -v</code>，如果成功應該就會顯示下面的資訊<br>
<img src="https://sabrinajiang14.github.io//post-images/1574750699412.png" alt=""></p>
<h3 id="step-7">Step 7</h3>
<p>安裝 Appium</p>
<pre><code class="language-bash">npm install -g appium   #安裝Server
npm install wd          #安裝Client
</code></pre>
<p>另外，也可以裝個檢查器，檢查 Appium 是否安裝完成。</p>
<pre><code class="language-bash">npm install appium-doctor -g    #安裝檢查器
appium-doctor                   #進行檢查
</code></pre>
<p><img src="https://sabrinajiang14.github.io//post-images/1574751083574.png" alt=""><br>
<img src="https://sabrinajiang14.github.io//post-images/1574751088658.png" alt=""><br>
檢查器會將預計會用到的全部檢查一遍，就算不是全部都過，也不用擔心。只要確定自己要測試的那個平台的相關軟體有安裝完成就可以囉。</p>
<h3 id="step8">Step8</h3>
<p>安裝 Appium Desktop<br>
可以直接透過<a href="http://appium.io/">官網</a>下載或是到他們的 <a href="https://github.com/appium/appium-desktop/releases/download/v1.15.1/Appium-mac-1.15.1.dmg">Github</a> 去下載 Appium-mac-x.x.dmg（目前我看到最新版是這個，連結隨時都有可能換，還是從官網連過去最保險）</p>
<p>以上步驟如果都完成了，就可以打開 Appium Desktop<br>
<img src="https://sabrinajiang14.github.io//post-images/1574751218258.png" alt=""></p>
<p>點選 Start Server 後會顯示另外一個畫面。<br>
<img src="https://sabrinajiang14.github.io//post-images/1574751250657.png" alt=""></p>
<p>點下右上角的搜尋圖示 — Start Inspector Session<br>
<img src="https://sabrinajiang14.github.io//post-images/1574751270624.png" alt=""></p>
<p>在這個新的畫面上可以做一些設定，像我是要測試 iOS app。所以我就填上 platformName、platformVersion、autommationName等等相關訊息。（想知道有哪些關鍵字可以填，直接點下方的 Desired Capabilities Documentation 去查看）<br>
完成後可以將此次的測試資料儲存起來，以期下次在使用。點選 Start Session 後就會看到模擬器被啟動囉！<br>
（話說我還有實機的部分還沒有實作，等我實作完再上來補:P）</p>
<hr>
<p>今天這篇文章沒有寫的很專業，只能說是簡單的入門篇而已，希望有幫助到想要入門的朋友唷！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[工商] Marquee For App]]></title>
        <id>https://sabrinajiang14.github.io//post/gong-shang-marquee-for-app</id>
        <link href="https://sabrinajiang14.github.io//post/gong-shang-marquee-for-app">
        </link>
        <updated>2019-09-24T09:21:42.000Z</updated>
        <content type="html"><![CDATA[<p>不知道為啥，這個在web界很紅的小元件，現在在app裡也要參一腳。UI都指定了，我只好來找找有沒有好用的套件。</p>
<p>找了很久發現都沒有好用的，不然就是功能太過複雜。<br>
所以我後來只好跟著安著的復刻iOS版</p>
<figure data-type="image" tabindex="1"><img src="https://sabrinajiang14.github.io//post-images/1574760475357.png" alt=""></figure>
<p><a href="https://github.com/SabrinaJiang14/MarqueeLabel">連結</a>在此<br>
覺得不錯的朋友，就直接拿去用吧^^</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OC] Create countdown circle]]></title>
        <id>https://sabrinajiang14.github.io//post/oc-create-countdown-circle</id>
        <link href="https://sabrinajiang14.github.io//post/oc-create-countdown-circle">
        </link>
        <updated>2017-05-11T08:24:29.000Z</updated>
        <content type="html"><![CDATA[<pre><code>//
//  CircleView.h
//
//  Created by Sabrina on 2017/5/12.
//  Copyright © 2017年 Sabrina All rights reserved.
//

#import &lt;UIKit/UIKit.h&gt;

@interface CircleView : UIView

@property (nonatomic) CGFloat precent;

- (id)initWithFrame:(CGRect)frame arcWidth:(double)width;

@end
</code></pre>
<pre><code>//
//  CircleView.m
//
//  Created by Sabrina on 2017/5/12.
//  Copyright © 2017年 Sabrina All rights reserved.
//

#import &quot;CircleView.h&quot;

@implementation CircleView{
	CGFloat startAngle;
	CGFloat endAngle;
	CGFloat circlewWidth, lineWith;
}


- (id)initWithFrame:(CGRect)frame arcWidth:(double)width
{
	
	self = [super initWithFrame:frame];
	
	if (self) {
		// Initialization code

		self.backgroundColor = [UIColor clearColor];
		
		// Determine our start and stop angles for the arc (in radians)
		startAngle = M_PI * 1.5;
		endAngle = startAngle + (M_PI * 2);
		circlewWidth = self.frame.size.width - 20;
		lineWith = self.frame.size.width / 2;
		
	}
	
	return self;
	
}

- (void)drawRect:(CGRect)rect {
	
	UIBezierPath *circle = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(10, 10, circlewWidth, circlewWidth)];
	[[UIColor blueColor] setStroke];
	circle.lineWidth = 0;
	[circle stroke];
	[[UIColor whiteColor] setFill];
	[circle fill];
	
	UIBezierPath *arcLine = [UIBezierPath bezierPathWithArcCenter:CGPointMake(lineWith, lineWith) radius:circlewWidth / 2 startAngle:startAngle endAngle:(endAngle - startAngle) * (self.precent / 100.0) + startAngle clockwise:YES];
	arcLine.lineWidth = 10;
	[[UIColor colorWithRed:145/255.0 green:197/255.0 blue:226/255.0 alpha:1.0] setStroke];
	[arcLine stroke];
	
	NSString* textContent = @&quot;&quot;;
	
	if (self.precent &gt; 100.0){
		textContent = [NSString stringWithFormat:@&quot;%@%%&quot;, @&quot;100&quot;];
	}else{
		textContent = [NSString stringWithFormat:@&quot;%.1f%%&quot;, self.precent];
	}
	
	// Text Drawing
	CGRect textRect = CGRectMake((rect.size.width / 2.0)/2.0, (rect.size.height / 2.0) - 45/2.0, circlewWidth, 45);
	[[UIColor colorWithRed:145/255.0 green:197/255.0 blue:226/255.0 alpha:1.0] setFill];
	NSDictionary *attributes = @{ NSFontAttributeName: [UIFont fontWithName: @&quot;Helvetica-Bold&quot; size: 30.0],
								  NSForegroundColorAttributeName : [UIColor colorWithRed:145/255.0 green:197/255.0 blue:226/255.0 alpha:1.0]};
	[textContent drawInRect:textRect withAttributes:attributes];
}

@end
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[工商] SJDatePicker]]></title>
        <id>https://sabrinajiang14.github.io//post/gong-shang-sjdatepicker</id>
        <link href="https://sabrinajiang14.github.io//post/gong-shang-sjdatepicker">
        </link>
        <updated>2017-04-25T07:53:31.000Z</updated>
        <content type="html"><![CDATA[<p>最近大家都一直在討論說，一個優秀的工程師，除了本身的技術，以及要有一顆保持不斷學習的心之外，應該還要有辦法留一些什麼作品集或是工具包之類的東西。<br>
一方面是當又遇到類似的 UI 或是實作時可以快速拿出應用，不用再重新刻輪子了。<br>
所以我就把我這個做的這一個 Picker 放到 github 上。</p>
<p>如果有興趣的朋友，也可以直接拿去用^^</p>
<figure data-type="image" tabindex="1"><img src="https://sabrinajiang14.github.io//post-images/1574755709723.png" alt=""></figure>
<p><a href="https://github.com/SabrinaJiang14/SJDatePicker">連結</a>在此</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Swift] Observer Pattern 2 - KVO]]></title>
        <id>https://sabrinajiang14.github.io//post/swift-observer-pattern-2-kvo</id>
        <link href="https://sabrinajiang14.github.io//post/swift-observer-pattern-2-kvo">
        </link>
        <updated>2017-04-13T07:46:05.000Z</updated>
        <content type="html"><![CDATA[<p>重點</p>
<ol>
<li>只支援 NSObject 的子物件</li>
<li>要加入關鍵字 dynamic</li>
</ol>
<pre><code>class album: NSObject {
    dynamic var id:String?
    dynamic var name:String?
    dynamic var url:String?
}
</code></pre>
<pre><code>class ViewController: UIViewController {

    let ab:album = album()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        ab.id = &quot;0&quot;
        ab.name = &quot;album1&quot;
        ab.url = &quot;http://www.apple.com.tw&quot;
        
        ab.addObserver(self, forKeyPath: &quot;url&quot;, options: [.old,.new], context: nil)
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        ab.removeObserver(self, forKeyPath: &quot;url&quot;)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func Button_Click(_ sender: Any) {
        ab.url = &quot;http://www.google.com.tw&quot;
    }

    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == &quot;url&quot;{
            var newStr:String = &quot;&quot;, oldStr:String = &quot;&quot;
            
            if let dict = change?[.newKey] {
                newStr = dict as! String
            }
            if let dict = change?[.oldKey]{
                oldStr = dict as! String
            }
            print(&quot;old value = \(oldStr) -&gt; new value = \(newStr)&quot;)
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Swift] Observer Pattern 1 - NSNotificationCenter]]></title>
        <id>https://sabrinajiang14.github.io//post/swift-observer-pattern-nsnotificationcenter</id>
        <link href="https://sabrinajiang14.github.io//post/swift-observer-pattern-nsnotificationcenter">
        </link>
        <updated>2017-04-13T07:38:56.000Z</updated>
        <content type="html"><![CDATA[<p>Swift 的觀察者模式實作：</p>
<pre><code>static let CHANGE_BACKGROUND_COLOR = &quot;changeBackgroundColor&quot;

func viewDidLoad(){
  super.viewDidLoad()
  
  //加入觀察者
  NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(changeBackgroundColor), name: CHANGE_BACKGROUND_COLOR, object: nil)
}

//移除觀察者
func viewWillDisappear(animated: Bool){
  NSNotificationCenter.defaultCenter().removeObserver(self, name: CHANGE_BACKGROUND_COLOR, object: nil)
}

//實作
func changeBackgroundColor(){
  self.view.backgroundColor = UIColor.redColor()
}
</code></pre>
<pre><code>func button_Click(){
  NSNotificationCenter.defaultCenter().postNotificationName(viewcontroller.CHANGE_BACKGROUND_COLOR, object: nil)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OC] 如何簡單劃出一條線]]></title>
        <id>https://sabrinajiang14.github.io//post/oc-ru-he-jian-dan-hua-chu-yi-tiao-xian</id>
        <link href="https://sabrinajiang14.github.io//post/oc-ru-he-jian-dan-hua-chu-yi-tiao-xian">
        </link>
        <updated>2016-07-20T07:35:18.000Z</updated>
        <content type="html"><![CDATA[<pre><code>UIImageView *imageView1 = [[UIImageView alloc]initWithFrame:CGRectMake(0, 200, 320, 20)];
[self.view addSubview:imageView1];

UIGraphicsBeginImageContext(imageView1.frame.size);   //开始画线
[imageView1.image drawInRect:CGRectMake(0, 0, imageView1.frame.size.width, imageView1.frame.size.height)];
CGContextSetLineCap(UIGraphicsGetCurrentContext(), kCGLineCapRound);  //设置线条终点形状
    
const CGFloat lengths[] = {5,3};
CGContextRef line = UIGraphicsGetCurrentContext();
CGContextSetStrokeColorWithColor(line, [UIColor redColor].CGColor);

CGContextSetLineDash(line, 0, lengths, 2);  //画虚线
CGContextMoveToPoint(line, 0.0, 20.0);    //开始画线
CGContextAddLineToPoint(line, 310.0, 20.0);
CGContextStrokePath(line);

imageView1.image = UIGraphicsGetImageFromCurrentImageContext();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OC] New UIAlertController]]></title>
        <id>https://sabrinajiang14.github.io//post/oc-new-uialertcontroller</id>
        <link href="https://sabrinajiang14.github.io//post/oc-new-uialertcontroller">
        </link>
        <updated>2016-03-07T07:32:09.000Z</updated>
        <content type="html"><![CDATA[<p>今年開始 Alert view 有新的寫法了。</p>
<p>需要改成用 UIAlertController 的方式去實作，不然就會得到警告喔！</p>
<pre><code>UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&quot;刪除&quot; message:@&quot;確定要刪除？&quot; preferredStyle:UIAlertControllerStyleAlert];
UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
  //裡面實作
}];
UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;Cancel&quot; style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {
  //裡面實作
}];
[alert addAction:sureAction];
[alert addAction:cancelAction];
[self presentViewController:alert animated:YES completion:nil];
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OC] 如何切字串]]></title>
        <id>https://sabrinajiang14.github.io//post/oc-ru-he-qie-zi-chuan</id>
        <link href="https://sabrinajiang14.github.io//post/oc-ru-he-qie-zi-chuan">
        </link>
        <updated>2016-03-07T07:26:48.000Z</updated>
        <content type="html"><![CDATA[<pre><code>NSString類別裡，總共有三種切字串的方法
1. - (NSString *)substringFromIndex:(NSUInteger)anIndex
2. - (NSString *)substringToIndex:(NSUInteger)anIndex
3. - (NSString *)substringWithRange:(NSRange)aRange

==================
NSString *str = @&quot;1234567890&quot;;  
NSLog(@&quot;Original String: %@&quot;, str);  
NSLog(@&quot;substringFromIndex: 5 ==&gt; %@&quot;, [str substringFromIndex:5]);  
NSLog(@&quot;substringToIndex: 5 ==&gt; %@&quot;, [str substringToIndex:5]);  
NSLog(@&quot;substringWithRange: from 7, length 3 ==&gt; %@&quot;, [str substringWithRange:NSMakeRange(7, 3)]); 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OC] UISearchController 的用法]]></title>
        <id>https://sabrinajiang14.github.io//post/oc-uisearchcontroller-de-yong-fa</id>
        <link href="https://sabrinajiang14.github.io//post/oc-uisearchcontroller-de-yong-fa">
        </link>
        <updated>2016-03-03T07:29:15.000Z</updated>
        <content type="html"><![CDATA[<pre><code>@interface SearchAddressController : UIViewController&lt;UISearchControllerDelegate, UISearchDisplayDelegate, UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate&gt;

@property (weak, nonatomic) IBOutlet UITableView *contectTable;
@property (nonatomic, strong) UISearchController *searchController;
</code></pre>
<pre><code>- (void)viewDidLoad {
    self.searchController = [[UISearchController alloc] initWithSearchResultsController:nil];
    self.searchController.searchResultsUpdater = self;
    self.searchController.dimsBackgroundDuringPresentation = NO;
    self.searchController.searchBar.scopeButtonTitles = @[];
    self.searchController.searchBar.delegate = self;
    self.contectTable.tableHeaderView = self.searchController.searchBar;
    [self.searchController.searchBar sizeToFit];
    self.definesPresentationContext = YES;
}

#pragma mark - UISearchController delegate
- (void)updateSearchResultsForSearchController:(UISearchController *)searchController
{
    NSString *searchString = searchController.searchBar.text;
    if (searchString.length != 0) {
        shouldShowSearchResults = true;
        NSPredicate *resultPredicate = [NSPredicate predicateWithFormat:@&quot;self CONTAINS[c] %@&quot;, searchString];
        searchResultArray = [addressArray filteredArrayUsingPredicate:resultPredicate];
        [self.contectTable reloadData];
    }else{
        shouldShowSearchResults = false;
        [self.contectTable reloadData];
    }
}

- (void)searchBar:(UISearchBar *)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope
{
    [self updateSearchResultsForSearchController:self.searchController];
}
</code></pre>
]]></content>
    </entry>
</feed>